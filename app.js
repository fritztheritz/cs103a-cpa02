/*
  app.js -- This creates an Express webserver with login/register/logout authentication
*/

// *********************************************************** //
//  Loading packages to support the server
// *********************************************************** //
// First we load in all of the packages we need for the server...
const createError = require("http-errors"); // to handle the server errors
const express = require("express");
const path = require("path"); // to refer to local paths
const cookieParser = require("cookie-parser"); // to handle cookies
const session = require("express-session"); // to handle sessions using cookies
const debug = require("debug")("personalapp:server");
const layouts = require("express-ejs-layouts");
const axios = require("axios")

// *********************************************************** //
//  Loading models
// *********************************************************** //
const Movie = require('./models/Movie')
const SavedMovies = require('./models/SavedMovies')

// *********************************************************** //
//  Loading JSON datasets
// *********************************************************** //
const movies = require('./public/data/movies.json')


// *********************************************************** //
//  Connecting to the database
// *********************************************************** //

const mongoose = require('mongoose');
const dotenv = require('dotenv');
dotenv.config();
const mongodb_URI = `mongodb+srv://${process.env.DB_USERNAME}:${process.env.DB_PASSWORD}@cluster0.2bzuo.mongodb.net/test`
mongoose.connect(mongodb_URI, { useNewUrlParser: true, useUnifiedTopology: true });

// mongoose.connect( process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true } );
// fix deprecation warnings
mongoose.set('useFindAndModify', false);
mongoose.set('useCreateIndex', true);

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() { console.log("we are connected!!!") });





// *********************************************************** //
// Initializing the Express server 
// This code is run once when the app is started and it creates
// a server that respond to requests by sending responses
// *********************************************************** //
const app = express();

// Here we specify that we will be using EJS as our view engine
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "ejs");



// this allows us to use page layout for the views 
// so we don't have to repeat the headers and footers on every page ...
// the layout is in views/layout.ejs
app.use(layouts);

// Here we process the requests so they are easy to handle
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

// Here we specify that static files will be in the public folder
app.use(express.static(path.join(__dirname, "public")));

// Here we enable session handling using cookies
app.use(
    session({
        secret: "zzbbyanana789sdfa8f9ds8f90ds87f8d9s789fds", // this ought to be hidden in process.env.SECRET
        resave: false,
        saveUninitialized: false
    })
);

// *********************************************************** //
//  Defining the routes the Express server will respond to
// *********************************************************** //


// here is the code which handles all /login /signin /logout routes
const auth = require('./routes/auth');
const { deflateSync } = require("zlib");
app.use(auth)

// middleware to test is the user is logged in, and if not, send them to the login page
const isLoggedIn = (req, res, next) => {
    if (res.locals.loggedIn) {
        next()
    } else res.redirect('/login')
}


// specify that the server should render the views/index.ejs page for the root path
// and the index.ejs code will be wrapped in the views/layouts.ejs code which provides
// the headers and footers for all webpages generated by this app
app.get("/", (req, res, next) => {
    res.render("index");
});

app.get("/about", (req, res, next) => {
    res.render("about");
});


/* ************************
  Loading (or reloading) the data into a collection
   ************************ */

app.get('/upsertDB',
    async(req, res, next) => {
        await Movie.deleteMany({})
        for (movie of movies) {
            const { Title, Genre, Description, Actors, Runtime, Revenue} = movie;
            await Movie.findOneAndUpdate({ Title, Genre, Description, Actors, Runtime, Revenue }, movie, { upsert: true })
        }
        const num = await Movie.find({}).count();
        res.send("data uploaded: " + num)
    }
)


app.post('/movies/title',
    // show movies with a certain string in the title
    async(req, res, next) => {
        const { title } = req.body;
        const movies = await Movie.find({Title: {$regex: title}}).sort({Title: 1})
        res.locals.movies = movies
        res.render('movielist', {movies: movies})
    }
)

app.post('/movies/actor',
    // show movies with a certain actor in the list of actors
    async(req, res, next) => {
        const { actor } = req.body;
        const movies = await Movie.find({Actors: {$regex: actor}}).sort({Title: 1})
        // res.json(movies)
        res.locals.movies = movies
        res.render('movielist', {movies: movies})
    }
)

app.post('/movies/genre',
    // show movies with a certain genre in the list of genres
    async(req, res, next) => {
        const { genre } = req.body;
        const movies = await Movie.find({Genre: {$regex: genre}}).sort({Title: 1})
        res.locals.movies = movies
        res.render('movielist', {movies: movies})
    }
)

app.get('/movies/show/:movieId',
    // show all info about a movie given its movieid
    async(req, res, next) => {
        const { movieId } = req.params;
        const movie = await Movie.findOne({ _id: movieId })
        res.locals.movie = movie
        res.render('movie')
    }
)

app.use(isLoggedIn)

app.get('/movies/saved',
    // show the current user's saved movies
    async(req, res, next) => {
        try {
            const userId = res.locals.user._id;
            const movieIds =
                (await SavedMovies.find({ userId }))
                .map(x => x.movieId)
            res.locals.movies = await Movie.find({ _id: { $in: movieIds } })
            res.render('savedlist')
        } catch (e) {
            next(e)
        }
    }
)

app.get('/movies/saved/title',
    // show the current user's saved movies (sorted by title)
    async(req, res, next) => {
        try {
            const userId = res.locals.user._id;
            const movieIds =
                (await SavedMovies.find({ userId }))
                .map(x => x.movieId)
            res.locals.movies = await Movie.find({ _id: { $in: movieIds } }).sort({Title: 1})
            res.render('savedlist')
        } catch (e) {
            next(e)
        }
    }
)

app.get('/movies/saved/rating',
    // show the current user's saved movies (sorted by rating)
    async(req, res, next) => {
        try {
            const userId = res.locals.user._id;
            const movieIds =
                (await SavedMovies.find({ userId }))
                .map(x => x.movieId)
            res.locals.movies = await Movie.find({ _id: { $in: movieIds } }).sort({Rating: -1, Title: 1})
            res.render('savedlist')
        } catch (e) {
            next(e)
        }
    }
)

app.get('/movies/saved/year',
    // show the current user's saved movies (sorted by year)
    async(req, res, next) => {
        try {
            const userId = res.locals.user._id;
            const movieIds =
                (await SavedMovies.find({ userId }))
                .map(x => x.movieId)
            res.locals.movies = await Movie.find({ _id: { $in: movieIds } }).sort({Year: 1, Title: 1})
            res.render('savedlist')
        } catch (e) {
            next(e)
        }
    }
)

app.get('/movies/saved/runtime',
    // show the current user's saved movies (sorted by runtime)
    async(req, res, next) => {
        try {
            const userId = res.locals.user._id;
            const movieIds =
                (await SavedMovies.find({ userId }))
                .map(x => x.movieId)
            res.locals.movies = await Movie.find({ _id: { $in: movieIds } }).sort({Runtime: 1, Title: 1})
            res.render('savedlist')
        } catch (e) {
            next(e)
        }
    }
)


app.get('/movies/remove/:movieid',
    // remove a movie from the user's saved list
    async(req, res, next) => {
        try {
            await SavedMovies.remove({
                userId: res.locals.user._id,
                movieId: req.params.movieid
            })
            res.redirect('/movies/saved')

        } catch (e) {
            next(e)
        }
    }
)

app.get('/addMovie/:movieid',
    // add a movie to the user's saved list
    async(req, res, next) => {
        try {
            const movieId = req.params.movieid
            const userId = res.locals.user._id
                // check to make sure it's not already loaded
            const lookup = await SavedMovies.find({ movieId, userId })
            if (lookup.length == 0) {
                const savedMovie = new SavedMovies({ movieId, userId })
                await savedMovie.save()
            }
            res.redirect('/movies/saved')
        } catch (e) {
            next(e)
        }
    })




// here we catch 404 errors and forward to error handler
app.use(function(req, res, next) {
    next(createError(404));
});

// this processes any errors generated by the previous routes
// notice that the function has four parameters which is how Express indicates it is an error handler
app.use(function(err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get("env") === "development" ? err : {};
    // render the error page
    res.status(err.status || 500);
    res.render("error");
});


// *********************************************************** //
//  Starting up the server!
// *********************************************************** //
//Here we set the port to use between 1024 and 65535  (2^16-1)
const port = "5000";
app.set("port", port);

// and now we startup the server listening on that port
const http = require("http");
const server = http.createServer(app);

server.listen(port);

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

server.on("error", onError);

server.on("listening", onListening);

module.exports = app;